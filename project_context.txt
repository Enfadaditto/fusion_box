Quiero desarrollar una aplicacion multiplataforma con flutter  para facilitar la toma de ciertas decisiones en el juego pokemon infinite fusion.
Mi principal idea es poder ofrecer una lista de todos los distintos pokemon, en la que el usuario escriba cuantos pokemon distintos quiera y al presionar al boton "generar fusiones" se dispondra en una tabla de n x n (siendo n la longitud de la lista de pokemon insertados) en la que se muestren sprites de estas fusiones y tipos, nada más. Al presionar uno de estos sprites, se desplegaria una pantalla de detalles, pero esto lo hare en una segunda fase. Por ahora quiero conocer como puedo recoger estos sprites en tiempo de ejecucion. Me gustaria poder hacerlo 100% offline, de forma que me encantaria sacar los datos de los archivos internos del juego.
Un caso de uso normal podria ser:
(si es la primera vez que el usuario abre la app) := Selecciona la ruta del juego
Se muestra la "caja" de pokemon seleccionados, que representa esta lista que he comentado
Se presiona el boton generar y cuando acabe el procesamiento, se muestra una tabla n x n con todas las posibles combinaciones distintas con los pokemon de la caja

la ruta de los sprites es tal que Graphics/CustomBattlers/spritesheets/spritesheets_custom/[Num de pokedex del pokemon como cabeza] y hay (por ejemplo para bulbasaur #1 pokedex) carpeta 1 y 1a si para una misma fusion hay varios sprites

el formato de estos spritesheets es como el que envio (es el de bulbasaur)


﻿como deberia estructurar las carpetas de la app? me gustaria que aunque simple, esta app sirva como portfolio para mis proyectos, me gustaria desde mi aplicacion hacer algo tipo "getFusion(1,10);" y que me devolviese todos los sprites distintos para las fusiones entre bulbasaur y caterpie.
Quiero que este getFusion este en un parser que haga lo necesario para sacar los sprites y asi desacoplar lo maximo las funcionalidades, quiero usar una estructura lo mas limpia posible y emplear las mejores practicas para facilitar el desarrollo

quiero usar una estructura como:

lib/
├── main.dart
├── config/
│   └── app_config.dart
├── core/
│   ├── constants/
│   │   ├── app_constants.dart
│   │   └── sprite_constants.dart
│   ├── errors/
│   │   ├── exceptions.dart
│   │   └── failures.dart
│   ├── network/
│   │   └── network_info.dart
│   └── utils/
│       ├── file_utils.dart
│       └── image_utils.dart
├── data/
│   ├── datasources/
│   │   ├── local/
│   │   │   ├── game_local_datasource.dart
│   │   │   └── sprite_local_datasource.dart
│   │   └── remote/ (para futuras expansiones)
│   ├── models/
│   │   ├── pokemon_model.dart
│   │   ├── fusion_model.dart
│   │   └── spritesheet_model.dart
│   ├── parsers/
│   │   ├── sprite_parser.dart
│   │   ├── pokemon_data_parser.dart
│   │   └── fusion_calculator.dart
│   └── repositories/
│       ├── pokemon_repository_impl.dart
│       └── sprite_repository_impl.dart
├── domain/
│   ├── entities/
│   │   ├── pokemon.dart
│   │   ├── fusion.dart
│   │   └── sprite_data.dart
│   ├── repositories/
│   │   ├── pokemon_repository.dart
│   │   └── sprite_repository.dart
│   └── usecases/
│       ├── get_fusion.dart
│       ├── get_pokemon_list.dart
│       └── setup_game_path.dart
├── presentation/
│   ├── bloc/ (o providers si prefieres)
│   │   ├── pokemon_list/
│   │   │   ├── pokemon_list_bloc.dart
│   │   │   ├── pokemon_list_event.dart
│   │   │   └── pokemon_list_state.dart
│   │   └── fusion_grid/
│   │       ├── fusion_grid_bloc.dart
│   │       ├── fusion_grid_event.dart
│   │       └── fusion_grid_state.dart
│   ├── pages/
│   │   ├── home_page.dart
│   │   ├── pokemon_selection_page.dart
│   │   ├── fusion_grid_page.dart
│   │   └── fusion_detail_page.dart
│   └── widgets/
│       ├── common/
│       │   ├── loading_widget.dart
│       │   └── error_widget.dart
│       ├── pokemon/
│       │   ├── pokemon_card.dart
│       │   └── pokemon_list_tile.dart
│       └── fusion/
│           ├── fusion_grid_item.dart
│           ├── sprite_from_sheet.dart
│           └── fusion_detail_card.dart
└── injection_container.dart (Dependency Injection)